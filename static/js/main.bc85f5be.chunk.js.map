{"version":3,"sources":["sections/Footer/Footer.tsx","sections/Header/Header.tsx","sections/Main/Game/sections/Answers.tsx","sections/Main/Game/sections/Question.tsx","sections/Main/models/Question.ts","services/QuestionsClient.ts","services/QuestionRepository.ts","sections/Main/Game/Game.tsx","sections/Main/useGame.ts","sections/Main/Main.tsx","App.tsx","index.tsx"],"names":["Footer","year","Date","getFullYear","Header","title","className","Answers","answers","handleClick","map","answer","Button","key","onClick","e","Question","question","Jumbotron","data","correctAnswer","Object","assign","this","questionsClient","httpClient","axios","create","baseURL","url","get","questionsRepository","response","results","questions","mapQuestions","shuffle","decode","AllHtmlEntities","result","decodedAnswers","concat","incorrect_answers","correct_answer","shuffledAnswers","Game","useState","setQuestions","gameIsOn","setGameIsOn","currentQuestionId","setCurrentQuestionId","message","setMessage","find","a","useEffect","length","startGame","currentTarget","textContent","useGame","currentQuestion","Message","Main","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc85f5be.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Footer: React.FC = () => {\n  const date = new Date();\n  const year = date.getFullYear();\n\n  return (\n    <>\n      <footer>&copy; {year} Oscar Villalta</footer>\n    </>\n  );\n};\n","import React from 'react';\n\nexport const Header: React.FC<HeaderProps> = ({ title }) => (\n  <div className=\"header\">\n    <h1>{title}</h1>\n  </div>\n);\n\ninterface HeaderProps {\n  title: string;\n}\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\n\nexport const Answers: React.FC<AnswerProps> = ({ answers, handleClick }) => (\n  <>\n    {answers.map(answer => (\n      <Button key={answer} onClick={(e: React.MouseEvent<HTMLButtonElement>) => handleClick(e)}>\n        {answer}\n      </Button>\n    ))}\n  </>\n);\n\ninterface AnswerProps {\n  answers: string[];\n  handleClick: (e: React.MouseEvent<HTMLButtonElement>) => void;\n}\n","import React from 'react';\nimport { Jumbotron } from 'react-bootstrap';\n\nexport const Question: React.FC<QuestionProps> = ({ question }) => (\n  <>\n    <Jumbotron>\n      <h2>{question}</h2>\n    </Jumbotron>\n  </>\n);\n\ninterface QuestionProps {\n  question: string;\n}\n","export class Question {\n  question: string = '';\n  answers: string[] = [];\n  correctAnswer: string = '';\n\n  constructor(data: Partial<Question> = {}) {\n    Object.assign(this, data);\n  }\n}\n","import { AxiosInstance, default as axios } from 'axios';\n\nconst TRIVIA_API_BASE_URL = 'https://opentdb.com';\n\nclass QuestionsClient {\n  httpClient: QuestionsClientInterface;\n\n  constructor() {\n    this.httpClient = axios.create({\n      baseURL: TRIVIA_API_BASE_URL,\n    });\n  }\n\n  async get(url: string): Promise<any> {\n    return this.httpClient.get(url);\n  }\n}\n\ntype QuestionsClientInterface = AxiosInstance;\n\nexport const questionsClient = new QuestionsClient();\n","import { AllHtmlEntities } from 'html-entities';\nimport { concat, shuffle } from 'lodash';\nimport { Question } from 'sections/Main/models/Question';\nimport { questionsClient } from 'services/QuestionsClient';\n// import mock from './mockResponse.json';\n\nclass QuestionsRepository {\n  async get(): Promise<any> {\n    const response = await questionsClient.get('/api.php?amount=10');\n    // const response = mock;\n\n    const results = response.data.results;\n\n    const questions = mapQuestions(results);\n\n    return shuffle(questions);\n  }\n}\n\nexport const questionsRepository = new QuestionsRepository();\n\nconst mapQuestions = (data: any): Question[] => {\n  const { decode } = AllHtmlEntities;\n\n  const questions = data.map((result: any) => {\n    const answers = concat(result.incorrect_answers, result.correct_answer);\n\n    const decodedAnswers = answers.map(answer => decode(answer));\n\n    const shuffledAnswers = shuffle(decodedAnswers) || [];\n\n    return new Question({\n      question: decode(result.question),\n      correctAnswer: decode(result.correct_answer),\n      answers: shuffledAnswers,\n    });\n  });\n\n  return questions;\n};\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Answers } from 'sections/Main/Game/sections/Answers';\nimport { Question } from 'sections/Main/Game/sections/Question';\nimport { useGame } from 'sections/Main/useGame';\n\nexport const Game: React.FC = () => {\n  const { currentQuestionId, handleClick, gameIsOn, startGame, questions, message } = useGame();\n\n  const currentQuestion = questions[currentQuestionId];\n\n  if (!gameIsOn) {\n    return (\n      <div className=\"game start-page\">\n        <Button onClick={startGame}>Start Game</Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"question-wrapper\">\n        <Question question={currentQuestion.question} />\n      </div>\n      <div className=\"message-wrapper\">\n        <Message message={message} />\n      </div>\n      <div className=\"answer-wrapper\">\n        <Answers answers={currentQuestion.answers} handleClick={handleClick} />\n      </div>\n    </div>\n  );\n};\n\nconst Message: React.FC<{ message: string }> = ({ message }) => (\n  <>\n    <h3>{message}</h3>\n  </>\n);\n","import { find } from 'lodash';\nimport { useEffect, useState } from 'react';\nimport { Question } from 'sections/Main/models/Question';\nimport { questionsRepository } from 'services/QuestionRepository';\n\nexport const useGame = () => {\n  const [questions, setQuestions] = useState([new Question()]);\n  const [gameIsOn, setGameIsOn] = useState(false);\n  const [currentQuestionId, setCurrentQuestionId] = useState(0);\n  const [message, setMessage] = useState('');\n\n  const { answers, correctAnswer } = questions[currentQuestionId];\n\n  const answer = find(answers, (a: any) => a === correctAnswer); // not sure if this catches a bad value\n\n  useEffect(() => {\n    if (currentQuestionId === questions.length - 1) {\n      setGameIsOn(false);\n\n      return;\n    }\n  }, [currentQuestionId, questions]);\n\n  const startGame = async () => {\n    const questions = await questionsRepository.get();\n\n    setQuestions(questions);\n    setCurrentQuestionId(0);\n    setGameIsOn(true);\n  };\n\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const choice = e.currentTarget.textContent;\n\n    if (choice === answer) {\n      setCurrentQuestionId(currentQuestionId + 1);\n\n      setMessage('');\n      return;\n    }\n\n    setMessage('that is incorrect');\n  };\n\n  return {\n    gameIsOn,\n    currentQuestionId,\n    startGame,\n    handleClick,\n    questions,\n    message,\n  };\n};\n","import React from 'react';\nimport { Game } from 'sections/Main/Game/Game';\n\nexport const Main: React.FC = () => <Game />;\n","import React from 'react';\nimport { Footer } from 'sections/Footer/Footer';\nimport { Header } from 'sections/Header/Header';\nimport { Main } from 'sections/Main/Main';\n\nexport const App: React.FC = () => (\n  <div className=\"app\">\n    <Header title=\"Trivia\" />\n\n    <div className=\"main\">\n      <Main />\n    </div>\n\n    <Footer />\n  </div>\n);\n\n// will need something to control the timers, maybe a hook\n\n// try to hook this to some API to get questions\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from 'App';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}