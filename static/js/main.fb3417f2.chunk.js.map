{"version":3,"sources":["sections/Footer/Footer.tsx","sections/Header/Header.tsx","sections/Main/Game/sections/Answers.tsx","sections/Main/Game/sections/Question.tsx","sections/Main/models/Question.ts","services/QuestionsClient.ts","services/QuestionRepository.ts","sections/Main/models/Game.ts","sections/Main/useGame.ts","sections/Main/Game/Game.tsx","sections/Main/Main.tsx","App.tsx","index.tsx"],"names":["Footer","year","Date","getFullYear","Header","title","className","Answers","answers","handleClick","disableAnswers","map","answer","Button","key","onClick","e","Question","question","Jumbotron","data","correctAnswer","Object","assign","this","questionsClient","httpClient","axios","create","baseURL","url","get","questionsRepository","response","results","questions","mapQuestions","shuffle","decode","AllHtmlEntities","result","decodedAnswers","concat","incorrect_answers","correct_answer","shuffledAnswers","Game","questionPosition","fetchQuestions","length","instance","useState","gameIsOn","setGameIsOn","message","setMessage","countdown","setCountdown","setDisableAnswers","score","setScore","game","getInstance","advanceQuestion","useCallback","getQuestionsPosition","getQuestionsCount","useEffect","interval","setInterval","clearInterval","getQuestion","setTimeout","showAnswer","init","a","initialize","choice","currentTarget","textContent","find","useGame","href","Message","CountdownTimer","Main","history","createHashHistory","path","component","pageNumber","DummyPage","ReactGA","pageview","window","location","pathname","search","tagManagerArgs","gtmId","TagManager","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb3417f2.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Footer: React.FC = () => {\n  const date = new Date();\n  const year = date.getFullYear();\n\n  return (\n    <>\n      <footer>&copy; {year} Oscar Villalta</footer>\n    </>\n  );\n};\n","import React from 'react';\n\nexport const Header: React.FC<HeaderProps> = ({ title }) => (\n  <div className=\"header\">\n    <h1>{title}</h1>\n  </div>\n);\n\ninterface HeaderProps {\n  title: string;\n}\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\n\nexport const Answers: React.FC<AnswerProps> = ({ answers, handleClick, disableAnswers }) => {\n  if (disableAnswers) {\n    return <></>;\n  }\n\n  return (\n    <>\n      {answers.map(answer => (\n        <Button key={answer} onClick={(e: React.MouseEvent<HTMLButtonElement>) => handleClick(e)}>\n          {answer}\n        </Button>\n      ))}\n    </>\n  );\n};\n\ninterface AnswerProps {\n  answers: string[];\n  handleClick: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  disableAnswers: boolean;\n}\n","import React from 'react';\nimport { Jumbotron } from 'react-bootstrap';\n\nexport const Question: React.FC<QuestionProps> = ({ question }) => (\n  <>\n    <Jumbotron>\n      <h2>{question}</h2>\n    </Jumbotron>\n  </>\n);\n\ninterface QuestionProps {\n  question: string;\n}\n","export class Question {\n  question: string = '';\n  answers: string[] = [];\n  correctAnswer: string = '';\n\n  constructor(data: Partial<Question> = {}) {\n    Object.assign(this, data);\n  }\n}\n","import { AxiosInstance, default as axios } from 'axios';\n\nconst TRIVIA_API_BASE_URL = 'https://opentdb.com';\n\nclass QuestionsClient {\n  httpClient: QuestionsClientInterface;\n\n  constructor() {\n    this.httpClient = axios.create({\n      baseURL: TRIVIA_API_BASE_URL,\n    });\n  }\n\n  async get(url: string): Promise<any> {\n    return this.httpClient.get(url);\n  }\n}\n\ntype QuestionsClientInterface = AxiosInstance;\n\nexport const questionsClient = new QuestionsClient();\n","import { AllHtmlEntities } from 'html-entities';\nimport { concat, shuffle } from 'lodash';\nimport { Question } from 'sections/Main/models/Question';\nimport { questionsClient } from 'services/QuestionsClient';\n// import mock from './mockResponse.json';\n\nclass QuestionsRepository {\n  async get(): Promise<any> {\n    const response = await questionsClient.get('/api.php?amount=10');\n    // const response = mock;\n\n    const results = response.data.results;\n\n    const questions = mapQuestions(results);\n\n    return shuffle(questions);\n  }\n}\n\nexport const questionsRepository = new QuestionsRepository();\n\nconst mapQuestions = (data: any): Question[] => {\n  const { decode } = AllHtmlEntities;\n\n  const questions = data.map((result: any) => {\n    const answers = concat(result.incorrect_answers, result.correct_answer);\n\n    const decodedAnswers = answers.map(answer => decode(answer));\n\n    if (decodedAnswers[0] !== 'True') {\n      const shuffledAnswers = shuffle(decodedAnswers) || [];\n\n      return new Question({\n        question: decode(result.question),\n        correctAnswer: decode(result.correct_answer),\n        answers: shuffledAnswers,\n      });\n    }\n\n    return new Question({\n      question: decode(result.question),\n      correctAnswer: decode(result.correct_answer),\n      answers: decodedAnswers,\n    });\n  });\n\n  return questions;\n};\n","import { Question } from 'sections/Main/models/Question';\nimport { questionsRepository } from 'services/QuestionRepository';\n\nexport class Game {\n  private static instance: Game;\n\n  questions: Question[];\n  questionPosition: number;\n\n  private constructor() {\n    this.questions = [new Question()];\n    this.questionPosition = 0;\n  }\n\n  static getInstance(): Game {\n    if (!Game.instance) {\n      Game.instance = new Game();\n    }\n\n    return Game.instance;\n  }\n\n  async initialize() {\n    this.questionPosition = 0;\n\n    await this.fetchQuestions();\n  }\n\n  advanceQuestion(): void {\n    this.questionPosition++;\n  }\n\n  getQuestion(): Question {\n    return this.questions[this.questionPosition];\n  }\n\n  getQuestionsCount(): number {\n    return this.questions.length;\n  }\n\n  getQuestionsPosition(): number {\n    return this.questionPosition;\n  }\n\n  private async fetchQuestions() {\n    const questions = await questionsRepository.get();\n\n    this.questions = questions;\n  }\n}\n","import { find } from 'lodash';\nimport { useState, useEffect, useCallback } from 'react';\nimport { Game } from 'sections/Main/models/Game';\n\nconst INITIALIZATION_ERROR = 'Problem resetting game.';\n\nconst QUESTION_TIMER = 10;\n\nexport const useGame = () => {\n  const [gameIsOn, setGameIsOn] = useState(false);\n  const [message, setMessage] = useState('');\n  const [countdown, setCountdown] = useState<number | null>(QUESTION_TIMER);\n  const [disableAnswers, setDisableAnswers] = useState(false);\n  const [score, setScore] = useState(0);\n\n  const game = Game.getInstance();\n\n  const advanceQuestion = useCallback(() => {\n    const questionPosition = game.getQuestionsPosition();\n\n    if (questionPosition === game.getQuestionsCount() - 1) {\n      setGameIsOn(false);\n\n      return;\n    }\n\n    game.advanceQuestion();\n    setDisableAnswers(false);\n    setCountdown(QUESTION_TIMER);\n  }, [game]);\n\n  useEffect(() => {\n    const showAnswer = () => {\n      const answer = game.getQuestion().correctAnswer;\n\n      setMessage('The answer is: ' + answer);\n      setDisableAnswers(true);\n\n      setTimeout(() => {\n        advanceQuestion();\n        setMessage('');\n      }, 5000);\n    };\n\n    let interval: NodeJS.Timeout;\n\n    if (gameIsOn) {\n      interval = setInterval(() => {\n        setCountdown(countdown => {\n          if (countdown != null) {\n            return countdown - 1;\n          }\n\n          return null;\n        });\n      }, 1000);\n\n      if (countdown === 0) {\n        clearInterval(interval);\n\n        setCountdown(null);\n\n        showAnswer();\n      }\n    }\n\n    return () => clearInterval(interval);\n  }, [countdown, gameIsOn, game, advanceQuestion]);\n\n  const init = async () => {\n    try {\n      await game.initialize();\n\n      setGameIsOn(true);\n\n      setScore(0);\n      setCountdown(QUESTION_TIMER);\n    } catch (e) {\n      setMessage(INITIALIZATION_ERROR);\n    }\n  };\n\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const choice = e.currentTarget.textContent;\n\n    const question = game.getQuestion();\n\n    const answer = find(question.answers, (a: any) => a === question.correctAnswer);\n\n    if (choice !== answer) {\n      setMessage('that is incorrect');\n\n      return;\n    }\n\n    setScore(score + (countdown || 0));\n    advanceQuestion();\n    setMessage('');\n  };\n\n  return {\n    gameIsOn,\n    init,\n    handleClick,\n    message,\n    question: game.getQuestion(),\n    advanceQuestion,\n    countdown,\n    disableAnswers,\n    score,\n  };\n};\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Answers } from 'sections/Main/Game/sections/Answers';\nimport { Question } from 'sections/Main/Game/sections/Question';\nimport { useGame } from 'sections/Main/useGame';\n\nexport const Game: React.FC = () => {\n  const { handleClick, gameIsOn, init, question, message, countdown, disableAnswers, score } = useGame();\n\n  if (!gameIsOn) {\n    return (\n      <div className=\"game start-page\">\n        <Button onClick={init}>Start Game</Button>\n        <h2 className=\"mt-5\">Your last score was: {score}</h2>\n\n        <br />\n        <br />\n\n        <ul>\n          <li>\n            <a href=\"/page-1\">Page 1</a>\n          </li>\n          <li>\n            <a href=\"/page-2\">Page 2</a>\n          </li>\n          <li>\n            <a href=\"/page-3\">Page 3</a>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"question-wrapper\">\n        <Question question={question.question} />\n      </div>\n      <div className=\"message-wrapper\">\n        <CountdownTimer countdown={countdown} />\n      </div>\n      <div className=\"message-wrapper\">\n        <Message message={message} />\n      </div>\n      <div className=\"answer-wrapper\">\n        <Answers answers={question.answers} handleClick={handleClick} disableAnswers={disableAnswers} />\n      </div>\n    </div>\n  );\n};\n\nconst Message: React.FC<{ message: string }> = ({ message }) => (\n  <>\n    <h3>{message}</h3>\n  </>\n);\n\nconst CountdownTimer: React.FC<{ countdown: number | null }> = ({ countdown }) => <>{countdown ? <h3>{countdown}</h3> : ''}</>;\n","import { createHashHistory } from 'history';\nimport React from 'react';\nimport { Route, Router, Switch } from 'react-router-dom';\nimport { Game } from 'sections/Main/Game/Game';\n\nexport const Main: React.FC = () => {\n  const history = createHashHistory();\n\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route path=\"/Trivia-React/\" component={Game} />\n        <Route path=\"/Trivia-React/page-1\" component={() => <DummyPage pageNumber={1} />} />\n        <Route path=\"/Trivia-React/page-2\" component={() => <DummyPage pageNumber={2} />} />\n        <Route path=\"/Trivia-React/page-3\" component={() => <DummyPage pageNumber={3} />} />\n      </Switch>\n    </Router>\n  );\n};\n\nconst DummyPage: React.FC<{ pageNumber: number }> = ({ pageNumber }) => {\n  return (\n    <div className=\"w-100 text-center\">\n      <h1>Page-{pageNumber}</h1>\n      <a href={`/Trivia-React/page-${pageNumber}`}>HOME</a>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Footer } from 'sections/Footer/Footer';\nimport { Header } from 'sections/Header/Header';\nimport { Main } from 'sections/Main/Main';\nimport ReactGA from 'react-ga';\nimport TagManager from 'react-gtm-module';\n\nconst TRACKING_ID = 'UA-193836134-1';\nconst GTM_ID = 'GTM-55KMLRF';\n\nReactGA.initialize(TRACKING_ID);\nReactGA.pageview(window.location.pathname + window.location.search);\n\nconst tagManagerArgs = {\n  gtmId: GTM_ID,\n};\n\nTagManager.initialize(tagManagerArgs);\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <Header title=\"Trivia-3\" />\n\n      <div className=\"main\">\n        <Main />\n      </div>\n\n      <Footer />\n    </div>\n  );\n};\n\n// will need something to control the timers, maybe a hook\n\n// try to hook this to some API to get questions\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from 'App';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}